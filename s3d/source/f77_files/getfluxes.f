c****************************************************************************
c ... DO NOT EDIT.  AUTOMATICALLY GENERATED FILE.
c****************************************************************************
c ...
c ... CKWYP-compatible GETRATES: return molar production rates for all
c ... species given pressure (P), temperature (T), and mass fractions (Y).
c ...
c ... Generated by cgetrates 1.0b
c ...
c****************************************************************************

      subroutine getfluxes(INDX,INDX_R,N_R,P,T,Y,ICKWRK,RCKWRK,W_T,W_EL)

      implicit none

      integer    NSMax               ! maximum number of species
      parameter (NSMax = 1000)
      integer    NRMax               ! maximum number of reactions
      parameter (NRMax = 5000)

      real PA            ! atm. pressure; dyne/cm^2
      parameter (PA  = 1.013250d+06)
      real R0            ! gas constant; erg/(mol K)
      parameter (R0  = 8.314510d+07)
      real R0c           ! gas constant; cal/(mol K)
      parameter (R0c = 1.9872155832)
      real DLn10         ! log(10)
      parameter (DLn10 = 2.3025850929940459d0)

      integer          ICKWRK(*)     ! ...
      real RCKWRK(*)     ! ...
      real P             ! pressure
      real T             ! temperature (K)
      real Y(NSMax)      ! ...
      real WSPL(NSMax)   ! ...

      real FCent         ! ...
      real FDenom        ! ...
      real FLogPR        ! ...
      real FQuan         ! ...
      real CTOT          ! ...
      real OPRT          ! ...
      real ORTC          ! ...
      real OTC           ! ...
      real PR            ! ...
      real PRT           ! ...
      real RC            ! ...
      real RR_F          ! forward reaction rate
      real RR_R          ! reverse reaction rate
      real RR_K0         ! ...
      real RR_KInf       ! ...
      real TC            ! ...
      real THBCTEMP      ! ...
      real VLNPRT        ! ...
      real VLNTEMP       ! ...
      real XIK           ! ...

      real CGSPL(NSMax)  ! ...
      real CSPL(NSMax)   ! ...
      real ROPL(NRMax)   ! ...

      integer          KSP           ! ...
      integer          I             ! loop index

      integer n_r, indx, indx_r(*)
      real    w_t, w_el(*)

      intrinsic exp, log
      external  CKRHOY, CKYTCP


      integer NC_O2, NC_N2

      parameter (NC_O2                =   1)
      parameter (NC_N2                =   2)

      integer    NS                 ! number of species
      parameter (NS      =    2)

c----------------------------------------------------------------------------
c ... loop over all cells

c$doacross local(i,j,tc,rc,otc,vlntemp,cgspl,ksp,wspl,cspl,rr_f,rr_r,
c$&              xik,ctot,ropl,pr,fcent,thbctemp,rr_k0,rr_kinf,flogpr,
c$&              fdenom,fquan,prt,vlnprt),
c$&        share(m,n,temp,rho,temp1tab,odtab,ns,cgsptab,ys,ospwt,spwt,
c$&              temptab,wchem,tempref)

cmic$  do all
cmic$* private(xik,ctot,ropl,pr,fcent,thbctemp,rr_k0,rr_kinf,flogpr)
cmic$* private(i,j,tc,rc,otc,vlntemp,cgspl,ksp,wspl,cspl,rr_f,rr_r)
cmic$* private(fdenom,fquan,prt,vlnprt)
cmic$* shared(m,n,temp,rho,temp1tab,odtab,ns,cgsptab,ys,ospwt,spwt)
cmic$* shared(temptab,wchem,tempref)

c----------------------------------------------------------------------------

      TC = T

      call CKRHOY(P,T,Y,ICKWRK,RCKWRK,RC)

      otc     = 1.0 / tc
      ortc    = 1.0 / (tc * R0c)
      vlntemp = log(TC)
      prt     = PA / (R0 * TC)
      oprt    = 1.0 / prt
      vlnprt  = log(prt)

c ... get gibbs free energies

c inlined
c     call getcgsp(i,j,cgspl)

      call CKGML(T,ICKWRK,RCKWRK,CGSPL)
      do I=1,NS
         CGSPL(I) = CGSPL(I) / R0
      end do

c ... initialize

c     do ksp=1,ns
c        cspl(ksp)  = rc*ys(i,j,ksp)*ospwt(ksp)           ! concentrations
c     end do

      call CKYTCP(P,T,Y,ICKWRK,RCKWRK,CSPL)

      prt = pa / (r0 * tc)
      vlnprt = log(prt)
c----------------------------------------------------
c ... loop over all rxns to evaluate rate-of-progress

      do i=1,n_r
        ropl(i) = 0.
      enddo
c   1)  N2 + O2 <=> N2 + O2
      if (   indx .eq. NC_O2
     & ) then
      rr_f = 1.0d-010 * tc
      xik = cgspl(NC_O2)
      rr_r = rr_f * exp(xik*otc)
      ropl(1) = rr_f*cspl(NC_N2)*cspl(NC_O2) - rr_r*cspl(NC_N2)
     &  *cspl(NC_O2)
      
      endif
c-----------------------------------------------------
c ... evaluate contributions to reactants and products

c  1. O2
      if (indx .eq. NC_O2) then
      w_t       = ropl(1)
      n_r       = 1
      w_el  (1) = ropl(1)
      indx_r(1) = 1
      endif
c  2. N2
      if (indx .eq. NC_N2) then
      w_t       = 0.0
      n_r       = 0
      endif
      
      return
      end

