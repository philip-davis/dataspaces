
BOXLIB_BASE=EXE
ifeq ($(LBASE),box)
  BOXLIB_BASE=LIB
endif

#
# Utility classes.
#
C$(BOXLIB_BASE)_headers += BoxLib.H
C$(BOXLIB_BASE)_sources += BoxLib.cpp

C$(BOXLIB_BASE)_sources += ParmParse.cpp Utility.cpp
C$(BOXLIB_BASE)_headers += ParmParse.H Utility.H BLassert.H ArrayLim.H

C$(BOXLIB_BASE)_headers += REAL.H CONSTANTS.H SPACE.H SPACE_F.H

C$(BOXLIB_BASE)_sources += UseCount.cpp
C$(BOXLIB_BASE)_headers += UseCount.H

C$(BOXLIB_BASE)_sources += DistributionMapping.cpp ParallelDescriptor.cpp
C$(BOXLIB_BASE)_headers += DistributionMapping.H ParallelDescriptor.H

C$(BOXLIB_BASE)_sources += VisMF.cpp Arena.cpp BArena.cpp CArena.cpp
C$(BOXLIB_BASE)_headers += VisMF.H Arena.H BArena.H CArena.H

C$(BOXLIB_BASE)_headers += BLProfiler.H

C$(BOXLIB_BASE)_headers += BLBackTrace.H

C$(BOXLIB_BASE)_headers += BLFort.H
#
# Container classes.
#
T_headers += Array.H PArray.H PList.H Pointers.H Tuple.H BLMap.H

#
# FAB I/O stuff.
#
C${BOXLIB_BASE}_headers += FabConv.H FPC.H
C${BOXLIB_BASE}_sources += FabConv.cpp FPC.cpp

#
# Index space.
#
C$(BOXLIB_BASE)_sources += Box.cpp IntVect.cpp IndexType.cpp Orientation.cpp
C$(BOXLIB_BASE)_headers += Box.H IntVect.H IndexType.H Orientation.H

#
# Real space.
#
C$(BOXLIB_BASE)_sources += RealBox.cpp 
C$(BOXLIB_BASE)_headers += RealBox.H 

#
# Unions of rectangles.
#
C$(BOXLIB_BASE)_sources += BoxList.cpp BoxArray.cpp BoxDomain.cpp
C$(BOXLIB_BASE)_headers += BoxList.H BoxArray.H BoxDomain.H

#
# FORTRAN array data.
#
C$(BOXLIB_BASE)_sources += FArrayBox.cpp
C$(BOXLIB_BASE)_headers += FArrayBox.H

C$(BOXLIB_BASE)_sources += IArrayBox.cpp
C$(BOXLIB_BASE)_headers += IArrayBox.H

C$(BOXLIB_BASE)_headers += Looping.H

T_headers += BaseFab.H
C$(BOXLIB_BASE)_sources += BaseFab.cpp

#
# FORTRAN data defined on unions of rectangles.
#
C$(BOXLIB_BASE)_sources += MultiFab.cpp
C$(BOXLIB_BASE)_headers += MultiFab.H

C$(BOXLIB_BASE)_sources += iMultiFab.cpp
C$(BOXLIB_BASE)_headers += iMultiFab.H

T_headers += FabArray.H
C$(BOXLIB_BASE)_sources += FabArray.cpp

T_headers += ccse-mpi.H

#
# Geometry / Coordinate system routines.
#
ifneq ($(BL_NO_FORT),TRUE)
  C$(BOXLIB_BASE)_sources += CoordSys.cpp Geometry.cpp
  C$(BOXLIB_BASE)_headers += CoordSys.H Geometry.H
endif

#
# Fortran interface routines.
#
ifneq ($(BL_NO_FORT),TRUE)
  F$(BOXLIB_BASE)_sources += COORDSYS_$(DIM)D.F
  F$(BOXLIB_BASE)_headers += COORDSYS_F.H

  f$(BOXLIB_BASE)_sources += BLutil_F.f
  f$(BOXLIB_BASE)_sources += BLParmParse_F.f
  f$(BOXLIB_BASE)_sources += BLBoxLib_F.f
  f$(BOXLIB_BASE)_sources += BLProfiler_F.f

  F$(BOXLIB_BASE)_sources += SPECIALIZE_$(DIM)D.F
  F$(BOXLIB_BASE)_headers += SPECIALIZE_F.H

  f90$(BOXLIB_BASE)_sources += threadbox.f90
endif

C$(BOXLIB_BASE)_sources += BLProfiler.cpp
C$(BOXLIB_BASE)_sources += BLBackTrace.cpp
